#!/usr/bin/env python3
import os
import sys
import json
import toml


def json_load(fname):
    with open(fname, encoding="utf-8") as filep:
        return json.load(filep)


def toml_load(fname):
    with open(fname, encoding="utf-8") as filep:
        return toml.load(filep)


def main():
    if len(sys.argv) not in (3, 4):
        print(f"USAGE: {sys.argv[0]} <blueprint> <distro> <image-type> [arch]")
        sys.exit(1)
    cwd = os.path.dirname(os.path.abspath(sys.argv[0]))
    bp_file = sys.argv[1]
    distro = sys.argv[2]
    image_type = sys.argv[3]
    arch = "x86_64"
    if len(sys.argv) == 5:
        arch = sys.argv[4]

    # repos_path = os.path.join(cwd, "../../osbuild-composer/test/data/repositories")
    # repos_path = os.path.join(cwd, "../../osbuild-composer/repositories")
    repos_path = os.path.join(cwd, "../../osbuild-composer/tools/test-case-generators/repos.json")
    repos = json_load(repos_path)

    # distro_repos = json_load(os.path.join(repos_path, distro + ".json"))
    distro_repos = repos[distro]
    repos = distro_repos[arch]

    blueprint = toml_load(bp_file)
    ostree = {
        # "url": "http://localhost:8080/repo",
        # "ref": "rhel/9/x86_64/edge",
        # "parent": "bf5462f146647270a0684de8f5d24ae784d5b9cfde11d84c28d9ca1a73d4e0ce"
    }

    request = {
        "distro": distro,
        "arch": arch,
        "image-type": image_type,
        "blueprint": blueprint,
        "repositories": repos,
        "ostree": ostree,
    }

    print(json.dumps(request))


if __name__ == "__main__":
    main()

#!/usr/bin/env bash

set -eu
lowhost="$(hostname | tr "[:upper:]" "[:lower:]")"
pubkeyfile="${HOME}/.ssh/${lowhost}.pub"
sshport=2222
webport=10443
rundir="${XDG_RUNTIME_DIR:-${HOME}/.cache}/osbuild-vm"
overlaydir=${HOME}/VMs/overlays
mkdir -p "${overlaydir}"


hostarch="$(uname -m)"
if [[ "${hostarch}" == "arm64" ]]; then
    hostarch="aarch64"
elif [[ "${arch}" == "ppc64le" ]]; then
    arch="ppc64"
fi

usage() {
    echo "$0 DISK NAME [ARCH]"
    echo
    echo "Create an overlay from a given disk, install osbuild and osbuild-composer, and start the services."
    echo "Creates a user account with:"
    echo "  Username: $USER"
    echo "  Password: password42"
    echo "  Public key from:"
    echo "    - ${pubkeyfile}"
    echo
    echo "DISK   path to VM disk to boot"
    echo "NAME   names the VM to start or resume"
    echo "ARCH   architecture of the machine (default ${hostarch})"
    exit 1
}

case $# in
    2)
        baseimg="$1"
        imgname="$2"
        arch="${hostarch}"
        ;;
    3)
        baseimg="$1"
        imgname="$2"
        arch="$3"
        ;;
    *)
        usage
esac


while echo 1 > "/dev/tcp/localhost/${sshport}"; do
    ((sshport++))
done
echo "Forwarding port ${sshport} for SSH"

while echo 1 > "/dev/tcp/localhost/${webport}"; do
    ((webport++))
done
echo "Forwarding port ${webport} for https"

case "${arch}" in
    x86_64)
        arch_args=(
            "-enable-kvm"
            "-cpu" "host"
        )
        ;;
    aarch64)
        arch_args=(
            "-machine" "virt"
            "-bios" /opt/homebrew/Cellar/qemu/*/share/qemu/edk2-aarch64-code.fd
            "-accel" "hvf"
            "-cpu" "host"
        )
        ;;
    s390x)
        arch_args=()
        ;;
    ppc64le)
        arch_args=()
        ;;
    *)
        echo "Unknown architecture ${arch}"
        exit 1
esac

sshcmd() {
    ssh -q -p "${sshport}" develvm "$*"
}

mkoverlay() {
    baseimg="$1"
    image="$2"
    qemu-img create -o backing_file="${baseimg}",backing_fmt=qcow2 -f qcow2 "${image}"
    qemu-img resize "${image}" 100G
}


mkcloudinit() {
    # Adapted from gicmo's vm script
    genisoimage -input-charset utf-8 -output "${rundir}/${1}" -volid cidata -joliet -rock -quiet "${rundir}/data/user-data" "${rundir}/data/meta-data"
}

pubkey="$(cat "${pubkeyfile}")"

startvm() {
    mac="FE:0B:6E:22:3D:00"
    cd_arg=("")
    echo "${cd_arg}"
    if (( $# == 2 )); then
        cd_arg=("-cdrom" "${rundir}/${2}")
    fi
    # NOTE: Bridge doesn't work with (my) wireless adapter or driver
    # https://www.linux-kvm.org/page/Networking
    "qemu-system-${arch}"  \
        -nographic \
        -smp cpus=4 \
        -m 4G \
        -drive file="${1}" \
        -device virtio-net-pci,netdev=n0,mac="${mac}" \
        -netdev user,id=n0,net=10.0.2.0/24,hostfwd=tcp::"${sshport}"-:22,hostfwd=tcp::"${webport}"-:443 \
        "${arch_args[@]}" \
        "${cd_arg[@]}" \
        &
    waitfor "${sshport}"
    echo "VM started"
}

waitfor() {
    while ! ssh -q develvm -p "${1}" exit; do
        sleep 1
    done
}

installcomposer() {
    sshcmd sudo dnf install -y osbuild osbuild-composer composer-cli
    sshcmd sudo usermod -aG weldr,systemd-journal "${USER}"
    sshcmd sudo systemctl enable --now osbuild-composer.socket
}

installbuildtools() {
    # for building updated binaries and osbuild rpm packages
    sshcmd sudo dnf install -y go make git rpm-build krb5-devel jq vim podman
    sshcmd sudo dnf install -y go-rpm-macros || echo "Failed to install go-rpm-macros. Ignoring."
    sshcmd sudo dnf install -y go-srpm-macros || echo "Failed to install go-srpm-macros. Ignoring."
    sshcmd sudo dnf install -y gpgme-devel || echo "Failed to install gpgme-devel. Ignoring."
    sshcmd sudo dnf install -y btrfs-progs-devel device-mapper-devel || echo "Failed to install btrfs-progs-devel and device-mapper-devel. Ignoring."

    sshcmd git config --global user.email "testvm@osbuild.org"
    sshcmd git config --global user.name "${USER}"
}

fixdns() {
    sshcmd "sudo tee /etc/resolv.conf" << EOF
nameserver 10.38.5.26
nameserver 10.0.2.3
EOF
}

baseimgfname=$(basename "${baseimg}")
image="${overlaydir}/${baseimgfname%.*}-${imgname}.qcow2"

if [[ -e "${image}" ]]; then
    echo "Booting existing VM ${image}"
    startvm "${image}"
    fixdns
else
    echo "Setting up new VM using ${baseimg} -> ${image}"
    mkoverlay "${baseimg}" "${image}"
    startvm "${image}" ./cloudinit.iso
    fixdns

    installbuildtools
    installcomposer
fi

sshcmd sudo journalctl -fa

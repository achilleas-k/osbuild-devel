#!/usr/bin/env bash

set -eu
sshport=2222
webport=10443
rundir="${XDG_RUNTIME_DIR}/osbuild-vm"
overlaydir=/scratch/VMs/overlays
mkdir -p "${overlaydir}"

usage() {
    echo "$0 DISK NAME [ARCH]"
    echo
    echo "Create a named overlay from a given disk and boot it."
    echo
    echo "DISK   path to VM disk to boot"
    echo "NAME   names the VM to start or resume"
    echo "ARCH   architecture of the machine (default x86_64)"
    exit 1
}

case $# in
    2)
        baseimg="$1"
        imgname="$2"
        arch="x86_64"
        ;;
    3)
        baseimg="$1"
        imgname="$2"
        arch="$3"
        ;;
    *)
        usage
esac


while echo 1 > "/dev/tcp/localhost/${sshport}"; do
    ((sshport++))
done
echo "Forwarding port ${sshport} for SSH"

while echo 1 > "/dev/tcp/localhost/${webport}"; do
    ((webport++))
done
echo "Forwarding port ${webport} for https"

case "${arch}" in
    x86_64)
        arch_args=(
            "-enable-kvm"
            "-cpu" "host"
            "-bios" "/usr/share/edk2-ovmf/x64/OVMF.4m.fd"
        )
        ;;
    aarch64)
        arch_args=(
            "-machine" "virt"
            "-bios" "/usr/share/edk2-armvirt/aarch64/QEMU_EFI.fd"
            "-boot" "efi"
            "-cpu" "max"
        )
        ;;
    s390x)
        arch_args=()
        ;;
    ppc64le)
        arch_args=()
        ;;
    *)
        echo "Unknown architecture ${arch}"
        exit 1
esac

sshcmd() {
    ssh -q -p "${sshport}" develvm "$*"
}

mkoverlay() {
    baseimg="$1"
    image="$2"
    # TODO: make backing_file path relative to image
    qemu-img create -o backing_file="${baseimg}",backing_fmt=qcow2 -f qcow2 "${image}"
}


startvm() {
    mac="FE:0B:6E:22:3D:00"
    # NOTE: Bridge doesn't work with (my) wireless adapter or driver
    # https://www.linux-kvm.org/page/Networking
    if [[ "${arch}" == "ppc64le" ]]; then
        arch="ppc64"
    fi
    "qemu-system-${arch}"  \
        -nographic \
        -smp cpus=8 \
        -m 12G \
        -drive file="${1}" \
        -device virtio-net-pci,netdev=n0,mac="${mac}" \
        -netdev user,id=n0,net=10.0.2.0/24,hostfwd=tcp::"${sshport}"-:22,hostfwd=tcp::"${webport}"-:443 \
        "${arch_args[@]}" > /dev/null \
        &
    waitfor "${sshport}"
    echo "VM started"
}

waitfor() {
    while ! ssh -q develvm -p "${1}" exit; do
        sleep 1
    done
}

fixdns() {
    sshcmd "sudo tee /etc/resolv.conf" << EOF
nameserver 10.38.5.26
nameserver 10.0.2.3
EOF
}

# The last three components of the base image path are:
# <distro>_<arch>_<image type>_<config name>/<pipeline name>/disk.qcow2
# Use the third-to-last component to name the overlay image
baseimgfname=$(basename "$(dirname "$(dirname "${baseimg}")")")
image="${overlaydir}/${baseimgfname%.*}-${imgname}.qcow2"

if [[ -e "${image}" ]]; then
    echo "Booting existing VM ${image}"
else
    echo "Setting up new VM using ${baseimg} -> ${image}"
    mkoverlay "${baseimg}" "${image}"
fi

startvm "${image}"
fixdns
sshcmd sudo journalctl -fa

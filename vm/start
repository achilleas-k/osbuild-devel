#!/usr/bin/env bash

set -eu
lowhost="$(hostname | tr "[:upper:]" "[:lower:]")"
pubkeyfile="${HOME}/.ssh/${lowhost}.pub"
sshport=2222
webport=10443
rundir="${XDG_RUNTIME_DIR}/osbuild-vm"
overlaydir=/media/scratch/VMs/overlays
mkdir -p "${overlaydir}"

usage() {
    echo "$0 DISTRO NAME [ARCH]"
    echo
    echo "Start a DISTRO vm, install osbuild and osbuild-composer, and start the services."
    echo "Creates a user account with:"
    echo "  Username: $USER"
    echo "  Password: password42"
    echo "  Public key from:"
    echo "    - ${pubkeyfile}"
    echo
    echo "DISTRO is a distribution name and version (no dashes or periods, e.g., rhel90)"
    echo "NAME   names the VM to start or resume"
    exit 1
}

case $# in
    2)
        distro="$1"
        imgname="$2"
        arch="x86_64"
        ;;
    3)
        distro="$1"
        imgname="$2"
        arch="$3"
        ;;
    *)
        usage
esac


while echo 1 > "/dev/tcp/localhost/${sshport}"; do
    ((sshport++))
done
echo "Forwarding port ${sshport} for SSH"

while echo 1 > "/dev/tcp/localhost/${webport}"; do
    ((webport++))
done
echo "Forwarding port ${webport} for https"

case "${arch}" in
    x86_64)
        case "${distro}" in
            rhel90)
                baseimg=/media/scratch/VMs/rhel-guest-image-9.0-20210914.4.x86_64.qcow2
                ;;
            centos8)
                baseimg=/media/scratch/VMs/CentOS-Stream-GenericCloud-8-20220125.1.x86_64.qcow2
                ;;
            centos9)
                baseimg=/media/scratch/VMs/CentOS-Stream-GenericCloud-9-20220126.0.x86_64.qcow2
                ;;
            fedora36)
                baseimg=/media/scratch/VMs/Fedora-Cloud-Base-36-1.5.x86_64.qcow2
                ;;
            *)
                echo "No ${distro} image for ${arch}"
                exit 1
                ;;
        esac
        arch_args=(
            "-enable-kvm"
            "-cpu" "host"
        )
        ;;
    aarch64)
        case "${distro}" in
            rhel90)
                baseimg=/media/scratch/VMs/rhel-guest-image-9.0-20210920.5.aarch64.qcow2
                ;;
            centos9)
                baseimg=/media/scratch/VMs/CentOS-Stream-GenericCloud-9-20220126.0.aarch64.qcow2
                ;;
            *)
                echo "No ${distro} image for ${arch}"
                exit 1
                ;;
        esac
        arch_args=(
            "-machine" "virt"
            "-bios" "/usr/share/edk2-armvirt/aarch64/QEMU_EFI.fd"
            "-boot" "efi"
            "-cpu" "cortex-a57"
        )
        ;;
    s390x)
        case "${distro}" in
            centos9)
                baseimg=/media/scratch/VMs/CentOS-Stream-GenericCloud-9-20220126.0.s390x.qcow2
                ;;
            *)
                echo "No ${distro} image for ${arch}"
                exit 1
                ;;
        esac
        arch_args=()
        ;;
    ppc64le)
        case "${distro}" in
            centos9)
                baseimg=/media/scratch/VMs/CentOS-Stream-GenericCloud-9-20220126.0.ppc64le.qcow2
                ;;
            *)
                echo "No ${distro} image for ${arch}"
                exit 1
                ;;
        esac
        arch_args=()
        ;;
    *)
        echo "No base images for arch ${arch}"
        exit 1
esac

sshcmd() {
    ssh -q -p "${sshport}" localvm "$*"
}

mkoverlay() {
    baseimg="$1"
    image="$2"
    qemu-img create -o backing_file="${baseimg}",backing_fmt=qcow2 -f qcow2 "${image}"
    qemu-img resize "${image}" 100G
}


mkcloudinit() {
    # Adapted from gicmo's vm script
    genisoimage -input-charset utf-8 -output "${rundir}/${1}" -volid cidata -joliet -rock -quiet "${rundir}/data/user-data" "${rundir}/data/meta-data"
}

pubkey="$(cat "${pubkeyfile}")"
mkuserdata() {
    mkdir -p "${rundir}/data"
    cat > "${rundir}/data/user-data" << EOF
#cloud-config
users:
  - default
  - name: ${USER}
    gecos: AK
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh_pwauth: True
    ssh_authorized_keys:
      - ${pubkey}
  - name: root
    gecos: AK
    ssh_pwauth: True
    ssh_authorized_keys:
      - ${pubkey}
timezone: CET
chpasswd:
  list: |
    root:r
    ${USER}:password42
  expire: False
EOF

case "${distro}" in
    rhel86)
    cat >> "${rundir}/data/user-data" << EOF
yum_repos:
  baseos:
      name: baseos
      baseurl: "http://download.eng.brq.redhat.com/rhel-8/nightly/RHEL-8/latest-RHEL-8.6/compose/BaseOS/${arch}/os/"
      enabled: true
      gpgcheck: false
  appstream:
      name: appstream
      baseurl: "http://download.eng.brq.redhat.com/rhel-8/nightly/RHEL-8/latest-RHEL-8.6/compose/AppStream/${arch}/os/"
      enabled: true
      gpgcheck: false
  crb:
      name: crb
      baseurl: "http://download.eng.brq.redhat.com/rhel-8/nightly/RHEL-8/latest-RHEL-8.6/compose/CRB/${arch}/os/"
      enabled: true
      gpgcheck: false
EOF
    if [[ "${arch}" == "x86_64" ]]; then
        cat >> "${rundir}/data/user-data" << EOF
rt:
  name: rt
  baseurl: "http://download.eng.brq.redhat.com/rhel-8/nightly/RHEL-8/latest-RHEL-8.5/compose/RT/${arch}/os/"
  enabled: true
  gpgcheck: false
EOF
    fi
    ;;
    rhel9*)
    cat >> "${rundir}/data/user-data" << EOF
yum_repos:
  baseos:
      name: baseos
      baseurl: "http://download.eng.brq.redhat.com/rhel-9/nightly/RHEL-9/latest-RHEL-9.0/compose/BaseOS/${arch}/os/"
      enabled: true
      gpgcheck: false
  appstream:
      name: appstream
      baseurl: "http://download.eng.brq.redhat.com/rhel-9/nightly/RHEL-9/latest-RHEL-9.0/compose/AppStream/${arch}/os/"
      enabled: true
      gpgcheck: false
  crb:
      name: crb
      baseurl: "http://download.eng.brq.redhat.com/rhel-9/nightly/RHEL-9/latest-RHEL-9.0/compose/CRB/${arch}/os/"
      enabled: true
      gpgcheck: false
EOF
;;
esac
}

mkmetadata() {
    mkdir -p "${rundir}/data"
    cat > "${rundir}/data/meta-data" << EOF
instance-id: nocloud
local-hostname: ${1}
EOF
}

startvm() {
    mac="FE:0B:6E:22:3D:00"
    if (( $# == 2 )); then
        cd_arg=("-cdrom" "${rundir}/${2}")
    fi
    # NOTE: Bridge doesn't work with (my) wireless adapter or driver
    # https://www.linux-kvm.org/page/Networking
    if [[ "${arch}" == "ppc64le" ]]; then
        arch="ppc64"
    fi
    "qemu-system-${arch}"  \
        -nographic \
        -smp cpus=16 \
        -m 8G \
        -drive file="${1}" \
        -device virtio-net-pci,netdev=n0,mac="${mac}" \
        -netdev user,id=n0,net=10.0.2.0/24,hostfwd=tcp::"${sshport}"-:22,hostfwd=tcp::"${webport}"-:443 \
        "${arch_args[@]}" \
        "${cd_arg[@]}" \
        &
    waitfor "${sshport}"
    echo "VM started"
}

waitfor() {
    while ! ssh -q localvm -p "${1}" exit; do
        sleep 1
    done
}

installcomposer() {
    sshcmd sudo dnf install -y osbuild osbuild-composer composer-cli
    sshcmd sudo usermod -aG weldr,systemd-journal "${USER}"
    sshcmd sudo systemctl enable --now osbuild-composer.socket
}

installbuildtools() {
    # enable crb repo (in case it's disabled, e.g., for CentOS)
    sshcmd sudo dnf config-manager --set-enabled crb || true

    # for building updated binaries and osbuild rpm packages
    sshcmd sudo dnf install -y go make git rpm-build krb5-devel gpgme-devel jq vim
    ssshcmd sudo dnf install -y go-rpm-macros || echo "Failed to install go-rpm-macros. Ignoring."

    sshcmd git config --global user.email "testvm@osbuild.org"
    sshcmd git config --global user.name "${USER}"
}

fixdns() {
    sshcmd "sudo tee /etc/resolv.conf" << EOF
nameserver 10.38.5.26
nameserver 10.0.2.3
EOF
}

baseimgfname=$(basename "${baseimg}")
image="${overlaydir}/${baseimgfname%.*}-${imgname}.qcow2"

if [[ -e "${image}" ]]; then
    echo "Booting existing VM ${image}"
    startvm "${image}"
    fixdns
else
    echo "Setting up new VM using ${baseimg} -> ${image}"
    mkoverlay "${baseimg}" "${image}"
    mkuserdata
    mkmetadata "${distro}-${imgname}-vm"
    mkcloudinit composer-init.iso
    startvm "${image}" composer-init.iso
    fixdns

    installbuildtools
    installcomposer
fi

sshcmd sudo journalctl -fa

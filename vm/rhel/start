#!/usr/bin/env bash

rundir="${XDG_RUNTIME_DIR}/osbuild-vm"

lowhost="$(hostname | tr "[:upper:]" "[:lower:]")"
pubkey="$(cat "${HOME}/.ssh/${lowhost}.pub")"

mkcloudinit() {
    # Adapted from gicmo's vm script
    genisoimage -input-charset utf-8 -output "${rundir}/${1}" -volid cidata -joliet -rock -quiet "${rundir}/data/user-data" "${rundir}/data/meta-data"
}

mkuserdata() {
    mkdir -p "${rundir}/data"
    cat > "${rundir}/data/user-data" << EOF
#cloud-config
users:
  - default
  - name: ${USER}
    gecos: AK
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh_pwauth: True
    ssh_authorized_keys:
      - ${pubkey}
  - name: root
    gecos: AK
    ssh_pwauth: True
    ssh_authorized_keys:
      - ${pubkey}
timezone: CET
chpasswd:
  list: |
    root:r
    ${USER}:password123
  expire: False
yum_repos:
  baseos:
      name: baseos
      baseurl: "http://download.devel.redhat.com/rhel-8/nightly/RHEL-8/latest-RHEL-8.4/compose/BaseOS/x86_64/os/"
      enabled: true
      gpgcheck: false
  appstream:
      name: appstream
      baseurl: "http://download.devel.redhat.com/rhel-8/nightly/RHEL-8/latest-RHEL-8.4/compose/AppStream/x86_64/os/"
      enabled: true
      gpgcheck: false
  rt:
      name: rt
      baseurl: "http://download.devel.redhat.com/rhel-8/nightly/RHEL-8/latest-RHEL-8.4/compose/RT/x86_64/os/"
      enabled: true
      gpgcheck: false

EOF
}

mkmetadata() {
    mkdir -p "${rundir}/data"
    cat > "${rundir}/data/meta-data" << EOF
instance-id: nocloud
local-hostname: ${1}
EOF
}

macbase="FE:0B:6E:22:3D"
sshbase=2222
vmidx=0

startvm() {
    mac="${macbase}:$(printf %02d "${vmidx}")"
    initiso="${rundir}/${2}"
    sshport=$((sshbase+vmidx))
    # NOTE: Bridge doesn't work with (my) wireless adapter or driver
    # https://www.linux-kvm.org/page/Networking
    # qemu-system-x86_64 -enable-kvm -snapshot -m 4G -drive file="${1}" -cdrom "${initiso}" -net nic -net bridge,br=virbr0
    ((vmidx++))
    echo "Startig VM ${vmidx}..."
    qemu-system-x86_64 -enable-kvm -snapshot -smp 4 -m 12G -drive file="${1}" -cdrom "${initiso}" -device virtio-net-pci,netdev=n0,mac="${mac}" -netdev user,id=n0,net=10.0.2.0/24,hostfwd=tcp::"${sshport}"-:22,hostfwd=tcp::8700-:8700  &
    waitfor "${sshport}"
    echo "VM 1 started"
}

waitfor() {
    while ! ssh -q localvm -p "${1}" exit; do
        sleep 1
    done
}

installcomposer() {
    port="${1}"
    ssh -q -p "${port}" root@localvm dnf install -y osbuild osbuild-composer composer-cli

    ssh -q -p "${port}" root@localvm usermod -aG weldr achilleas

    ssh -q -p "${port}" root@localvm mkdir -p /etc/osbuild-composer/repositories/
    scp -q -P "${port}" ../osbuild-composer/test/data/repositories/rhel-84.json root@localvm:/etc/osbuild-composer/repositories/rhel-8.json
    ssh -q -p "${port}" root@localvm ln -sf /etc/osbuild-composer/repositories/rhel-8.json /etc/osbuild-composer/repositories/rhel-8-beta.json

    ssh -q -p "${port}" root@localvm systemctl start osbuild-composer.socket

    ssh -q -p "${port}" localvm composer-cli status show
}

installbuildtools() {
    port="${1}"
    # for building updated binaries and osbuild rpm packages
    ssh -q -p "${port}" root@localvm dnf install -y go make git rpm-build

    ssh -q -p "${port}" localvm git config --global user.email "testvm@osbuild.org"
    ssh -q -p "${port}" localvm git config --global user.name "vm"
}

fixdns() {
    ssh -q -p "${1}" root@localvm "cat > /etc/resolv.conf" << EOF
nameserver 10.38.5.26
nameserver 10.0.2.3
EOF
}

# 1. Composer VM
image=/scratch/VMs/rhel-guest-image-8.4-645.x86_64.qcow2
mkuserdata
mkmetadata composer-vm
mkcloudinit composer-init.iso
startvm "${image}" composer-init.iso
port1=${sshport}

# 2. Worker VM
# mkmetadata worker-vm
# mkcloudinit worker-init.iso
# startvm "${image}" worker-init.iso
# port2=${sshport}

fixdns "${port1}"
# waitfor "${port2}"
# echo "VM 2 started"

installbuildtools "${port1}"
installcomposer "${port1}"
# installcomposer "${port2}"

ssh -q -p "${port1}" root@localvm journalctl -f -u "*osbuild*"
